/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/main.js":
/*!*********************!*\
  !*** ./app/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./app/style.scss\");\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_scss__WEBPACK_IMPORTED_MODULE_0__);\n//# Scripts #//\n//- Setup -\n\n\nfunction addEvTrEnd(elem, func, o) {\n  // executes a function when css transition of element ends\n  var isNotAlready = true,\n      o = o ? o : true; // once?\n\n  elem.addEventListener('transitionend', () => {\n    func();\n  }, {\n    once: o\n  }); // forgot what most of it does, but it works so it's fine (I think)\n\n  trEndAlready.forEach(e => {\n    isNotAlready &= e == elem ? false : true;\n  });\n\n  if (isNotAlready) {\n    trEndAlready.push(elem);\n    elem.childNodes.forEach(el => {\n      el.addEventListener('transitionend', ev => {\n        ev.stopPropagation();\n      });\n    }); // Makes sure that it doesn't propagate to its children\n  }\n}\n\nvar trEndAlready = []; // - LOADING SCREEN\n\nfunction loadingStepsInfoAdd(loadingScreenEl, info, force) {\n  // adds custom status info under the loading bar\n  var force = force ? force : false; // will force dismiss loading screen if true\n\n  function newInfo(info, d, s) {\n    var d = d ? d : 1250,\n        s = s ? s : \"\";\n    var el = document.createElement(\"div\");\n    el.innerHTML = info;\n    el.setAttribute(\"style\", s); // custom css style if needed\n\n    loadingScreenEl.querySelector(\".loading-steps-info\").appendChild(el);\n    setTimeout(() => {\n      el.classList.add('spawn');\n      setTimeout(() => {\n        el.classList.add('hide');\n        addEvTrEnd(el, () => {\n          el.remove();\n        });\n      }, d); // custom delay if needed\n    }, 10);\n  } // new info\n\n\n  if (loadingScreenEl.querySelector(\".loading-steps-info\") && !loadingScreenEl.querySelector(\".loading-animation-container.hide\")) {\n    // will run only if the loading screen infos are shown\n    newInfo(info);\n  } // forces dismiss the loading screen in case it takes too long to load/can't finish\n\n\n  if (force) {\n    setTimeout(() => {\n      if (document.querySelector(\"loading-screen[class*='on']\")) {\n        // only if not dismissed\n        if (loadingScreenEl.querySelector(\".loading-steps-info\")) {\n          // info\n          newInfo(\"Loading is taking too long, dismissing the loading screen...\", 3000, \"color: var(--y-r2)\");\n          console.warn(\"[Y.ART] Loading of assets is taking too long. Loading screen dismissed.\");\n        }\n\n        setTimeout(() => {\n          // force dismiss\n          loadingScreenEl.classList.add(\"force-dismiss\");\n        }, 2000);\n      }\n    }, 4000);\n  }\n}\n\nfunction loadNormal(loadingScreenEl, removeLoadingScreen) {\n  // events when normal necessary things are loaded\n  var FontsLoaded = false,\n      on = \"-normal\";\n  loadingScreenEl.classList.add(\"on\" + on);\n  window.addEventListener(\"load\", () => {\n    // to be sure the loading screen goes out at some point\n    if (!FontsLoaded) {\n      removeLoadingScreen(on);\n    }\n\n    loadingStepsInfoAdd(loadingScreenEl, \"Page Loaded\", true); // true = force dismiss loading screen\n  });\n  document.fonts.ready.then(() => {\n    // fonts are not too fast and not too long to load, seems good enough\n    removeLoadingScreen(on);\n    FontsLoaded = true;\n    loadingStepsInfoAdd(loadingScreenEl, \"Fonts Loaded\");\n  });\n}\n\n; // -- ASSETS TO LOAD\n\nconst srcP = '/src/patterns/',\n      assetsToLoad = [srcP + 'p1.png'];\n\nfunction loadThings(assetsToLoad, customThingsToLoad, customToLoadOnID, toExecAfterLoading) {\n  // creating basic loading screen\n  var loadingScreenEl = document.createElement(\"loading-screen\");\n  loadingScreenEl.classList.add(\"on-assets\");\n  document.body.appendChild(loadingScreenEl);\n\n  function removeLoadingScreen(on) {\n    // normal way to dismiss the loading screen\n    loadingScreenEl.classList.remove(\"on\" + on);\n    addEvTrEnd(loadingScreenEl, () => {\n      loadingScreenEl.remove();\n    }); // executes a function when dismissing the loading screen (supposedly when everything has loaded)\n\n    if (!document.querySelector(\"loading-screen[class*='on']\")) {\n      toExecAfterLoading();\n    }\n  } // can load things other than assets if needed\n\n\n  var customThingsToLoad = customThingsToLoad ? customThingsToLoad : false;\n\n  if (customThingsToLoad) {\n    customThingsToLoad(loadingScreenEl, () => {\n      removeLoadingScreen(customToLoadOnID);\n    });\n  } // will need some visuals if it takes time, and it's cooler\n\n\n  if (!loadingScreenEl.querySelector(\".loading-animation-container\")) {\n    loadingScreenEl.innerHTML = `\n            <div class=\"loading-animation-container hide\">\n                <div class=\"head\">\n                    <span>Loading...</span>\n                    <div class=\"loading-idle-animation\"></div>\n                </div>\n                \n                <div class=\"loading-percent\">\n                    <div class=\"loading-bar\">\n                        <div class=\"bar\"></div>\n                        <div class=\"flash-1\"></div>\n                        <div class=\"flash-2\"></div>\n                    </div>\n                    <span class=\"percent\"></span>\n                </div>\n                <div class=\"loading-steps-info\"></div>\n            </div>\n        `;\n  } // delay before showing the loading infos because it is not necessary until it really takes time\n\n\n  setTimeout(() => {\n    loadingScreenEl.querySelector(\".loading-animation-container\").classList.remove('hide');\n  }, 1000); // invisible element where the assets while be created to load theme\n\n  var assetsLoader = document.createElement(\"assets-loader\");\n  assetsLoader.classList.add(\"dummy\");\n  document.body.appendChild(assetsLoader); // dividing array by chunks - (stackoverflow.com/a/37826698)\n\n  var perChunk = 4,\n      // items per chunk\n  assetsByChunks = assetsToLoad.reduce((all, one, i) => {\n    const ch = Math.floor(i / perChunk);\n    all[ch] = [].concat(all[ch] || [], one);\n    return all;\n  }, []);\n  var delay = 0,\n      assetsChunkCount = 0,\n      progressLoadingCurrent = 0;\n\n  (function loadThemAll() {\n    // load every assets four by four\n    setTimeout(() => {\n      // delaying and separating by chunks helps browser performances\n      delay = 50;\n      var items = '',\n          chunk = assetsByChunks[assetsChunkCount],\n          assetLoaded = 0;\n      chunk.forEach(asset => {\n        items += '<img src=' + asset + '>';\n      });\n      assetsLoader.innerHTML = items; // load next chunk when every asset here has been loaded\n\n      assetsLoader.querySelectorAll(\"img\").forEach(item => {\n        item.addEventListener('load', () => {\n          // load event on every of them\n          // +1 when loaded\n          ++assetLoaded;\n          ++progressLoadingCurrent;\n          const percent = (progressLoadingCurrent / assetsToLoad.length * 100).toFixed(0) + \"%\";\n          loadingScreenEl.querySelector(\".loading-percent .bar\").style.width = percent;\n          loadingScreenEl.querySelector(\".loading-percent .percent\").innerHTML = percent;\n\n          if (assetLoaded >= chunk.length) {\n            // when all assets are loaded\n            if (assetsChunkCount < assetsByChunks.length) {\n              // if not the last chunk\n              loadThemAll();\n            } else {\n              // when is the last chunk : clean & finish\n              assetsLoader.remove();\n              removeLoadingScreen(\"-assets\");\n            }\n          }\n        });\n      });\n      ++assetsChunkCount;\n    }, 0 + delay);\n  })();\n}\n\n;\nloadThings(assetsToLoad, loadNormal, \"-normal\", WelcomeSpawnAnimation); //- Variables -\n//- Scripts -\n\nfunction WelcomeSpawnAnimation() {\n  // Step 1\n  console.log('spawn');\n}\n\nfunction WelcomeInteractionAnimation() {\n  // Step 2\n  console.log('click');\n}\n\ndocument.querySelector(\".y-layer\").addEventListener(\"click\", WelcomeInteractionAnimation, {\n  once: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi5qcz9mMTYxIl0sIm5hbWVzIjpbImFkZEV2VHJFbmQiLCJlbGVtIiwiZnVuYyIsIm8iLCJpc05vdEFscmVhZHkiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInRyRW5kQWxyZWFkeSIsImZvckVhY2giLCJlIiwicHVzaCIsImNoaWxkTm9kZXMiLCJlbCIsImV2Iiwic3RvcFByb3BhZ2F0aW9uIiwibG9hZGluZ1N0ZXBzSW5mb0FkZCIsImxvYWRpbmdTY3JlZW5FbCIsImluZm8iLCJmb3JjZSIsIm5ld0luZm8iLCJkIiwicyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsInNldFRpbWVvdXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjb25zb2xlIiwid2FybiIsImxvYWROb3JtYWwiLCJyZW1vdmVMb2FkaW5nU2NyZWVuIiwiRm9udHNMb2FkZWQiLCJvbiIsIndpbmRvdyIsImZvbnRzIiwicmVhZHkiLCJ0aGVuIiwic3JjUCIsImFzc2V0c1RvTG9hZCIsImxvYWRUaGluZ3MiLCJjdXN0b21UaGluZ3NUb0xvYWQiLCJjdXN0b21Ub0xvYWRPbklEIiwidG9FeGVjQWZ0ZXJMb2FkaW5nIiwiYm9keSIsImFzc2V0c0xvYWRlciIsInBlckNodW5rIiwiYXNzZXRzQnlDaHVua3MiLCJyZWR1Y2UiLCJhbGwiLCJvbmUiLCJpIiwiY2giLCJNYXRoIiwiZmxvb3IiLCJjb25jYXQiLCJkZWxheSIsImFzc2V0c0NodW5rQ291bnQiLCJwcm9ncmVzc0xvYWRpbmdDdXJyZW50IiwibG9hZFRoZW1BbGwiLCJpdGVtcyIsImNodW5rIiwiYXNzZXRMb2FkZWQiLCJhc3NldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwicGVyY2VudCIsImxlbmd0aCIsInRvRml4ZWQiLCJzdHlsZSIsIndpZHRoIiwiV2VsY29tZVNwYXduQW5pbWF0aW9uIiwibG9nIiwiV2VsY29tZUludGVyYWN0aW9uQW5pbWF0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQ0E7O0FBR0EsU0FBU0EsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDQyxDQUFoQyxFQUFtQztBQUFFO0FBQ2pDLE1BQUlDLFlBQVksR0FBRyxJQUFuQjtBQUFBLE1BQ0lELENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFILEdBQU8sSUFEaEIsQ0FEK0IsQ0FFVDs7QUFDdEJGLE1BQUksQ0FBQ0ksZ0JBQUwsQ0FBc0IsZUFBdEIsRUFBdUMsTUFBTTtBQUFFSCxRQUFJO0FBQUssR0FBeEQsRUFBMEQ7QUFBRUksUUFBSSxFQUFHSDtBQUFULEdBQTFELEVBSCtCLENBSy9COztBQUNBSSxjQUFZLENBQUNDLE9BQWIsQ0FBcUJDLENBQUMsSUFBSTtBQUFFTCxnQkFBWSxJQUFLSyxDQUFDLElBQUlSLElBQU4sR0FBYyxLQUFkLEdBQXNCLElBQXRDO0FBQTZDLEdBQXpFOztBQUNBLE1BQUdHLFlBQUgsRUFBaUI7QUFDYkcsZ0JBQVksQ0FBQ0csSUFBYixDQUFrQlQsSUFBbEI7QUFDQUEsUUFBSSxDQUFDVSxVQUFMLENBQWdCSCxPQUFoQixDQUF5QkksRUFBRCxJQUFRO0FBQUVBLFFBQUUsQ0FBQ1AsZ0JBQUgsQ0FBb0IsZUFBcEIsRUFBc0NRLEVBQUQsSUFBUTtBQUFFQSxVQUFFLENBQUNDLGVBQUg7QUFBdUIsT0FBdEU7QUFBd0UsS0FBMUcsRUFGYSxDQUVnRztBQUNoSDtBQUNKOztBQUFDLElBQUlQLFlBQVksR0FBRyxFQUFuQixDLENBR0Y7O0FBQ0EsU0FBU1EsbUJBQVQsQ0FBNkJDLGVBQTdCLEVBQThDQyxJQUE5QyxFQUFvREMsS0FBcEQsRUFBMkQ7QUFBRTtBQUN6RCxNQUFJQSxLQUFLLEdBQUdBLEtBQUssR0FBR0EsS0FBSCxHQUFXLEtBQTVCLENBRHVELENBQ3BCOztBQUVuQyxXQUFTQyxPQUFULENBQWlCRixJQUFqQixFQUF1QkcsQ0FBdkIsRUFBMEJDLENBQTFCLEVBQTZCO0FBQ3pCLFFBQUlELENBQUMsR0FBR0EsQ0FBQyxHQUFHQSxDQUFILEdBQU8sSUFBaEI7QUFBQSxRQUNJQyxDQUFDLEdBQUdBLENBQUMsR0FBR0EsQ0FBSCxHQUFPLEVBRGhCO0FBRUEsUUFBSVQsRUFBRSxHQUFHVSxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBVDtBQUNJWCxNQUFFLENBQUNZLFNBQUgsR0FBZVAsSUFBZjtBQUNBTCxNQUFFLENBQUNhLFlBQUgsQ0FBZ0IsT0FBaEIsRUFBeUJKLENBQXpCLEVBTHFCLENBS1E7O0FBQzdCTCxtQkFBZSxDQUFDVSxhQUFoQixDQUE4QixxQkFBOUIsRUFBcURDLFdBQXJELENBQWlFZixFQUFqRTtBQUVKZ0IsY0FBVSxDQUFDLE1BQU07QUFDYmhCLFFBQUUsQ0FBQ2lCLFNBQUgsQ0FBYUMsR0FBYixDQUFpQixPQUFqQjtBQUNBRixnQkFBVSxDQUFDLE1BQU07QUFDYmhCLFVBQUUsQ0FBQ2lCLFNBQUgsQ0FBYUMsR0FBYixDQUFpQixNQUFqQjtBQUNBOUIsa0JBQVUsQ0FBQ1ksRUFBRCxFQUFLLE1BQU07QUFBRUEsWUFBRSxDQUFDbUIsTUFBSDtBQUFjLFNBQTNCLENBQVY7QUFDSCxPQUhTLEVBR1BYLENBSE8sQ0FBVixDQUZhLENBS047QUFDVixLQU5TLEVBTVAsRUFOTyxDQUFWO0FBT0gsR0FsQnNELENBb0J2RDs7O0FBQ0EsTUFBR0osZUFBZSxDQUFDVSxhQUFoQixDQUE4QixxQkFBOUIsS0FBd0QsQ0FBQ1YsZUFBZSxDQUFDVSxhQUFoQixDQUE4QixtQ0FBOUIsQ0FBNUQsRUFBZ0k7QUFBRTtBQUM5SFAsV0FBTyxDQUFDRixJQUFELENBQVA7QUFDSCxHQXZCc0QsQ0F5QnZEOzs7QUFDQSxNQUFHQyxLQUFILEVBQVU7QUFDTlUsY0FBVSxDQUFDLE1BQU07QUFDYixVQUFHTixRQUFRLENBQUNJLGFBQVQsQ0FBdUIsNkJBQXZCLENBQUgsRUFBMEQ7QUFBRTtBQUN4RCxZQUFHVixlQUFlLENBQUNVLGFBQWhCLENBQThCLHFCQUE5QixDQUFILEVBQXlEO0FBQUU7QUFDdkRQLGlCQUFPLENBQUMsOERBQUQsRUFBaUUsSUFBakUsRUFBdUUsb0JBQXZFLENBQVA7QUFDQWEsaUJBQU8sQ0FBQ0MsSUFBUixDQUFhLHlFQUFiO0FBQ0g7O0FBQ0RMLGtCQUFVLENBQUMsTUFBTTtBQUFFO0FBQ2ZaLHlCQUFlLENBQUNhLFNBQWhCLENBQTBCQyxHQUExQixDQUE4QixlQUE5QjtBQUNILFNBRlMsRUFFUCxJQUZPLENBQVY7QUFHSDtBQUNKLEtBVlMsRUFVUCxJQVZPLENBQVY7QUFXSDtBQUNKOztBQUVELFNBQVNJLFVBQVQsQ0FBb0JsQixlQUFwQixFQUFxQ21CLG1CQUFyQyxFQUEwRDtBQUFFO0FBQ3hELE1BQUlDLFdBQVcsR0FBRyxLQUFsQjtBQUFBLE1BQ0lDLEVBQUUsR0FBRyxTQURUO0FBR0FyQixpQkFBZSxDQUFDYSxTQUFoQixDQUEwQkMsR0FBMUIsQ0FBOEIsT0FBT08sRUFBckM7QUFFQUMsUUFBTSxDQUFDakMsZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBZ0MsTUFBTTtBQUFFO0FBQ3BDLFFBQUcsQ0FBQytCLFdBQUosRUFBaUI7QUFBRUQseUJBQW1CLENBQUNFLEVBQUQsQ0FBbkI7QUFBMEI7O0FBQzdDdEIsdUJBQW1CLENBQUNDLGVBQUQsRUFBa0IsYUFBbEIsRUFBaUMsSUFBakMsQ0FBbkIsQ0FGa0MsQ0FFeUI7QUFDOUQsR0FIRDtBQUlBTSxVQUFRLENBQUNpQixLQUFULENBQWVDLEtBQWYsQ0FBcUJDLElBQXJCLENBQTBCLE1BQU07QUFBRTtBQUM5Qk4sdUJBQW1CLENBQUNFLEVBQUQsQ0FBbkI7QUFBeUJELGVBQVcsR0FBRyxJQUFkO0FBQ3pCckIsdUJBQW1CLENBQUNDLGVBQUQsRUFBa0IsY0FBbEIsQ0FBbkI7QUFDSCxHQUhEO0FBSUg7O0FBQUEsQyxDQUVEOztBQUNBLE1BQU0wQixJQUFJLEdBQUcsZ0JBQWI7QUFBQSxNQUNBQyxZQUFZLEdBQUcsQ0FDWEQsSUFBSSxHQUFHLFFBREksQ0FEZjs7QUFLQSxTQUFTRSxVQUFULENBQW9CRCxZQUFwQixFQUFrQ0Usa0JBQWxDLEVBQXNEQyxnQkFBdEQsRUFBd0VDLGtCQUF4RSxFQUE0RjtBQUN4RjtBQUNBLE1BQUkvQixlQUFlLEdBQUdNLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixnQkFBdkIsQ0FBdEI7QUFDSVAsaUJBQWUsQ0FBQ2EsU0FBaEIsQ0FBMEJDLEdBQTFCLENBQThCLFdBQTlCO0FBQ0FSLFVBQVEsQ0FBQzBCLElBQVQsQ0FBY3JCLFdBQWQsQ0FBMEJYLGVBQTFCOztBQUVKLFdBQVNtQixtQkFBVCxDQUE2QkUsRUFBN0IsRUFBaUM7QUFBRTtBQUMvQnJCLG1CQUFlLENBQUNhLFNBQWhCLENBQTBCRSxNQUExQixDQUFpQyxPQUFPTSxFQUF4QztBQUNBckMsY0FBVSxDQUFDZ0IsZUFBRCxFQUFrQixNQUFNO0FBQUVBLHFCQUFlLENBQUNlLE1BQWhCO0FBQTJCLEtBQXJELENBQVYsQ0FGNkIsQ0FJN0I7O0FBQ0EsUUFBRyxDQUFDVCxRQUFRLENBQUNJLGFBQVQsQ0FBdUIsNkJBQXZCLENBQUosRUFBMkQ7QUFBRXFCLHdCQUFrQjtBQUFLO0FBQ3ZGLEdBWnVGLENBY3hGOzs7QUFDQSxNQUFJRixrQkFBa0IsR0FBR0Esa0JBQWtCLEdBQUdBLGtCQUFILEdBQXdCLEtBQW5FOztBQUNBLE1BQUdBLGtCQUFILEVBQXVCO0FBQUVBLHNCQUFrQixDQUFDN0IsZUFBRCxFQUFrQixNQUFNO0FBQUVtQix5QkFBbUIsQ0FBQ1csZ0JBQUQsQ0FBbkI7QUFBd0MsS0FBbEUsQ0FBbEI7QUFBd0YsR0FoQnpCLENBa0J4Rjs7O0FBQ0EsTUFBRyxDQUFDOUIsZUFBZSxDQUFDVSxhQUFoQixDQUE4Qiw4QkFBOUIsQ0FBSixFQUFtRTtBQUMvRFYsbUJBQWUsQ0FBQ1EsU0FBaEIsR0FBNkI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQWpCUTtBQWtCSCxHQXRDdUYsQ0F3Q3hGOzs7QUFDQUksWUFBVSxDQUFDLE1BQU07QUFBRVosbUJBQWUsQ0FBQ1UsYUFBaEIsQ0FBOEIsOEJBQTlCLEVBQThERyxTQUE5RCxDQUF3RUUsTUFBeEUsQ0FBK0UsTUFBL0U7QUFDbEIsR0FEUyxFQUNQLElBRE8sQ0FBVixDQXpDd0YsQ0E0Q3hGOztBQUNBLE1BQUlrQixZQUFZLEdBQUczQixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsZUFBdkIsQ0FBbkI7QUFDSTBCLGNBQVksQ0FBQ3BCLFNBQWIsQ0FBdUJDLEdBQXZCLENBQTJCLE9BQTNCO0FBQ0FSLFVBQVEsQ0FBQzBCLElBQVQsQ0FBY3JCLFdBQWQsQ0FBMEJzQixZQUExQixFQS9Db0YsQ0FrRHhGOztBQUNBLE1BQUlDLFFBQVEsR0FBRyxDQUFmO0FBQUEsTUFBa0I7QUFDZEMsZ0JBQWMsR0FBR1IsWUFBWSxDQUFDUyxNQUFiLENBQW9CLENBQUNDLEdBQUQsRUFBS0MsR0FBTCxFQUFTQyxDQUFULEtBQWU7QUFDaEQsVUFBTUMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsQ0FBQyxHQUFDTCxRQUFiLENBQVg7QUFDQUcsT0FBRyxDQUFDRyxFQUFELENBQUgsR0FBVSxHQUFHRyxNQUFILENBQVdOLEdBQUcsQ0FBQ0csRUFBRCxDQUFILElBQVMsRUFBcEIsRUFBd0JGLEdBQXhCLENBQVY7QUFDQSxXQUFPRCxHQUFQO0FBQ0gsR0FKZ0IsRUFJZCxFQUpjLENBRHJCO0FBT0EsTUFBSU8sS0FBSyxHQUFHLENBQVo7QUFBQSxNQUFlQyxnQkFBZ0IsR0FBRyxDQUFsQztBQUFBLE1BQXFDQyxzQkFBc0IsR0FBRyxDQUE5RDs7QUFDQSxHQUFDLFNBQVNDLFdBQVQsR0FBdUI7QUFBRTtBQUN0Qm5DLGNBQVUsQ0FBQyxNQUFNO0FBQUU7QUFDZmdDLFdBQUssR0FBRyxFQUFSO0FBQ0EsVUFBSUksS0FBSyxHQUFHLEVBQVo7QUFBQSxVQUNJQyxLQUFLLEdBQUdkLGNBQWMsQ0FBQ1UsZ0JBQUQsQ0FEMUI7QUFBQSxVQUVJSyxXQUFXLEdBQUcsQ0FGbEI7QUFJQUQsV0FBSyxDQUFDekQsT0FBTixDQUFjMkQsS0FBSyxJQUFJO0FBQUVILGFBQUssSUFBSSxjQUFhRyxLQUFiLEdBQW9CLEdBQTdCO0FBQW1DLE9BQTVEO0FBQ0FsQixrQkFBWSxDQUFDekIsU0FBYixHQUF5QndDLEtBQXpCLENBUGEsQ0FTYjs7QUFDQWYsa0JBQVksQ0FBQ21CLGdCQUFiLENBQThCLEtBQTlCLEVBQXFDNUQsT0FBckMsQ0FBNkM2RCxJQUFJLElBQUk7QUFBRUEsWUFBSSxDQUFDaEUsZ0JBQUwsQ0FBc0IsTUFBdEIsRUFBOEIsTUFBTTtBQUFFO0FBQ3pGO0FBQ0EsWUFBRTZELFdBQUY7QUFBZSxZQUFFSixzQkFBRjtBQUVmLGdCQUFNUSxPQUFPLEdBQUcsQ0FBRVIsc0JBQXNCLEdBQUduQixZQUFZLENBQUM0QixNQUF2QyxHQUFpRCxHQUFsRCxFQUF1REMsT0FBdkQsQ0FBK0QsQ0FBL0QsSUFBb0UsR0FBcEY7QUFDQXhELHlCQUFlLENBQUNVLGFBQWhCLENBQThCLHVCQUE5QixFQUF1RCtDLEtBQXZELENBQTZEQyxLQUE3RCxHQUFxRUosT0FBckU7QUFDQXRELHlCQUFlLENBQUNVLGFBQWhCLENBQThCLDJCQUE5QixFQUEyREYsU0FBM0QsR0FBdUU4QyxPQUF2RTs7QUFFQSxjQUFHSixXQUFXLElBQUlELEtBQUssQ0FBQ00sTUFBeEIsRUFBZ0M7QUFBRTtBQUM5QixnQkFBR1YsZ0JBQWdCLEdBQUdWLGNBQWMsQ0FBQ29CLE1BQXJDLEVBQTRDO0FBQUU7QUFDMUNSLHlCQUFXO0FBQ2QsYUFGRCxNQUVPO0FBQUU7QUFDTGQsMEJBQVksQ0FBQ2xCLE1BQWI7QUFDQUksaUNBQW1CLENBQUMsU0FBRCxDQUFuQjtBQUNIO0FBQ0o7QUFDSixTQWhCc0Q7QUFnQm5ELE9BaEJKO0FBa0JBLFFBQUUwQixnQkFBRjtBQUNILEtBN0JTLEVBNkJQLElBQUlELEtBN0JHLENBQVY7QUE4QkgsR0EvQkQ7QUFnQ0g7O0FBQUE7QUFFRGhCLFVBQVUsQ0FBQ0QsWUFBRCxFQUFlVCxVQUFmLEVBQTJCLFNBQTNCLEVBQXNDeUMscUJBQXRDLENBQVYsQyxDQUdBO0FBR0E7O0FBQ0EsU0FBU0EscUJBQVQsR0FBaUM7QUFBRTtBQUMvQjNDLFNBQU8sQ0FBQzRDLEdBQVIsQ0FBWSxPQUFaO0FBQ0g7O0FBRUQsU0FBU0MsMkJBQVQsR0FBdUM7QUFBRTtBQUNyQzdDLFNBQU8sQ0FBQzRDLEdBQVIsQ0FBWSxPQUFaO0FBQ0g7O0FBRUR0RCxRQUFRLENBQUNJLGFBQVQsQ0FBdUIsVUFBdkIsRUFBbUNyQixnQkFBbkMsQ0FBb0QsT0FBcEQsRUFBNkR3RSwyQkFBN0QsRUFBMEY7QUFBRXZFLE1BQUksRUFBRztBQUFULENBQTFGIiwiZmlsZSI6Ii4vYXBwL21haW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyMgU2NyaXB0cyAjLy9cblxuLy8tIFNldHVwIC1cbmltcG9ydCAnLi9zdHlsZS5zY3NzJztcblxuXG5mdW5jdGlvbiBhZGRFdlRyRW5kKGVsZW0sIGZ1bmMsIG8pIHsgLy8gZXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGVuIGNzcyB0cmFuc2l0aW9uIG9mIGVsZW1lbnQgZW5kc1xuICAgIHZhciBpc05vdEFscmVhZHkgPSB0cnVlLFxuICAgICAgICBvID0gbyA/IG8gOiB0cnVlOyAvLyBvbmNlP1xuICAgIGVsZW0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHsgZnVuYygpOyB9LCB7IG9uY2UgOiBvIH0pO1xuXG4gICAgLy8gZm9yZ290IHdoYXQgbW9zdCBvZiBpdCBkb2VzLCBidXQgaXQgd29ya3Mgc28gaXQncyBmaW5lIChJIHRoaW5rKVxuICAgIHRyRW5kQWxyZWFkeS5mb3JFYWNoKGUgPT4geyBpc05vdEFscmVhZHkgJj0gKGUgPT0gZWxlbSkgPyBmYWxzZSA6IHRydWU7IH0pO1xuICAgIGlmKGlzTm90QWxyZWFkeSkge1xuICAgICAgICB0ckVuZEFscmVhZHkucHVzaChlbGVtKTtcbiAgICAgICAgZWxlbS5jaGlsZE5vZGVzLmZvckVhY2goKGVsKSA9PiB7IGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCAoZXYpID0+IHsgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IH0pfSk7IC8vIE1ha2VzIHN1cmUgdGhhdCBpdCBkb2Vzbid0IHByb3BhZ2F0ZSB0byBpdHMgY2hpbGRyZW5cbiAgICB9XG59IHZhciB0ckVuZEFscmVhZHkgPSBbXTtcblxuXG4vLyAtIExPQURJTkcgU0NSRUVOXG5mdW5jdGlvbiBsb2FkaW5nU3RlcHNJbmZvQWRkKGxvYWRpbmdTY3JlZW5FbCwgaW5mbywgZm9yY2UpIHsgLy8gYWRkcyBjdXN0b20gc3RhdHVzIGluZm8gdW5kZXIgdGhlIGxvYWRpbmcgYmFyXG4gICAgdmFyIGZvcmNlID0gZm9yY2UgPyBmb3JjZSA6IGZhbHNlOyAvLyB3aWxsIGZvcmNlIGRpc21pc3MgbG9hZGluZyBzY3JlZW4gaWYgdHJ1ZVxuXG4gICAgZnVuY3Rpb24gbmV3SW5mbyhpbmZvLCBkLCBzKSB7XG4gICAgICAgIHZhciBkID0gZCA/IGQgOiAxMjUwLFxuICAgICAgICAgICAgcyA9IHMgPyBzIDogXCJcIjtcbiAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IGluZm87XG4gICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBzKTsgLy8gY3VzdG9tIGNzcyBzdHlsZSBpZiBuZWVkZWRcbiAgICAgICAgICAgIGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctc3RlcHMtaW5mb1wiKS5hcHBlbmRDaGlsZChlbCk7XG5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzcGF3bicpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgICAgICAgICAgIGFkZEV2VHJFbmQoZWwsICgpID0+IHsgZWwucmVtb3ZlKCk7IH0pXG4gICAgICAgICAgICB9LCBkKTsgLy8gY3VzdG9tIGRlbGF5IGlmIG5lZWRlZFxuICAgICAgICB9LCAxMCk7XG4gICAgfVxuXG4gICAgLy8gbmV3IGluZm9cbiAgICBpZihsb2FkaW5nU2NyZWVuRWwucXVlcnlTZWxlY3RvcihcIi5sb2FkaW5nLXN0ZXBzLWluZm9cIikgJiYgIWxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctYW5pbWF0aW9uLWNvbnRhaW5lci5oaWRlXCIpKSB7IC8vIHdpbGwgcnVuIG9ubHkgaWYgdGhlIGxvYWRpbmcgc2NyZWVuIGluZm9zIGFyZSBzaG93blxuICAgICAgICBuZXdJbmZvKGluZm8pO1xuICAgIH1cblxuICAgIC8vIGZvcmNlcyBkaXNtaXNzIHRoZSBsb2FkaW5nIHNjcmVlbiBpbiBjYXNlIGl0IHRha2VzIHRvbyBsb25nIHRvIGxvYWQvY2FuJ3QgZmluaXNoXG4gICAgaWYoZm9yY2UpIHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibG9hZGluZy1zY3JlZW5bY2xhc3MqPSdvbiddXCIpKSB7IC8vIG9ubHkgaWYgbm90IGRpc21pc3NlZFxuICAgICAgICAgICAgICAgIGlmKGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctc3RlcHMtaW5mb1wiKSkgeyAvLyBpbmZvXG4gICAgICAgICAgICAgICAgICAgIG5ld0luZm8oXCJMb2FkaW5nIGlzIHRha2luZyB0b28gbG9uZywgZGlzbWlzc2luZyB0aGUgbG9hZGluZyBzY3JlZW4uLi5cIiwgMzAwMCwgXCJjb2xvcjogdmFyKC0teS1yMilcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIltZLkFSVF0gTG9hZGluZyBvZiBhc3NldHMgaXMgdGFraW5nIHRvbyBsb25nLiBMb2FkaW5nIHNjcmVlbiBkaXNtaXNzZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgLy8gZm9yY2UgZGlzbWlzc1xuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nU2NyZWVuRWwuY2xhc3NMaXN0LmFkZChcImZvcmNlLWRpc21pc3NcIik7XG4gICAgICAgICAgICAgICAgfSwgMjAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDQwMDApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbG9hZE5vcm1hbChsb2FkaW5nU2NyZWVuRWwsIHJlbW92ZUxvYWRpbmdTY3JlZW4pIHsgLy8gZXZlbnRzIHdoZW4gbm9ybWFsIG5lY2Vzc2FyeSB0aGluZ3MgYXJlIGxvYWRlZFxuICAgIHZhciBGb250c0xvYWRlZCA9IGZhbHNlLFxuICAgICAgICBvbiA9IFwiLW5vcm1hbFwiO1xuXG4gICAgbG9hZGluZ1NjcmVlbkVsLmNsYXNzTGlzdC5hZGQoXCJvblwiICsgb24pO1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHsgLy8gdG8gYmUgc3VyZSB0aGUgbG9hZGluZyBzY3JlZW4gZ29lcyBvdXQgYXQgc29tZSBwb2ludFxuICAgICAgICBpZighRm9udHNMb2FkZWQpIHsgcmVtb3ZlTG9hZGluZ1NjcmVlbihvbik7IH1cbiAgICAgICAgbG9hZGluZ1N0ZXBzSW5mb0FkZChsb2FkaW5nU2NyZWVuRWwsIFwiUGFnZSBMb2FkZWRcIiwgdHJ1ZSk7IC8vIHRydWUgPSBmb3JjZSBkaXNtaXNzIGxvYWRpbmcgc2NyZWVuXG4gICAgfSk7XG4gICAgZG9jdW1lbnQuZm9udHMucmVhZHkudGhlbigoKSA9PiB7IC8vIGZvbnRzIGFyZSBub3QgdG9vIGZhc3QgYW5kIG5vdCB0b28gbG9uZyB0byBsb2FkLCBzZWVtcyBnb29kIGVub3VnaFxuICAgICAgICByZW1vdmVMb2FkaW5nU2NyZWVuKG9uKTsgRm9udHNMb2FkZWQgPSB0cnVlO1xuICAgICAgICBsb2FkaW5nU3RlcHNJbmZvQWRkKGxvYWRpbmdTY3JlZW5FbCwgXCJGb250cyBMb2FkZWRcIik7XG4gICAgfSk7XG59O1xuXG4vLyAtLSBBU1NFVFMgVE8gTE9BRFxuY29uc3Qgc3JjUCA9ICcvc3JjL3BhdHRlcm5zLycsXG5hc3NldHNUb0xvYWQgPSBbXG4gICAgc3JjUCArICdwMS5wbmcnLFxuXTtcblxuZnVuY3Rpb24gbG9hZFRoaW5ncyhhc3NldHNUb0xvYWQsIGN1c3RvbVRoaW5nc1RvTG9hZCwgY3VzdG9tVG9Mb2FkT25JRCwgdG9FeGVjQWZ0ZXJMb2FkaW5nKSB7XG4gICAgLy8gY3JlYXRpbmcgYmFzaWMgbG9hZGluZyBzY3JlZW5cbiAgICB2YXIgbG9hZGluZ1NjcmVlbkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxvYWRpbmctc2NyZWVuXCIpO1xuICAgICAgICBsb2FkaW5nU2NyZWVuRWwuY2xhc3NMaXN0LmFkZChcIm9uLWFzc2V0c1wiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsb2FkaW5nU2NyZWVuRWwpO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTG9hZGluZ1NjcmVlbihvbikgeyAvLyBub3JtYWwgd2F5IHRvIGRpc21pc3MgdGhlIGxvYWRpbmcgc2NyZWVuXG4gICAgICAgIGxvYWRpbmdTY3JlZW5FbC5jbGFzc0xpc3QucmVtb3ZlKFwib25cIiArIG9uKTtcbiAgICAgICAgYWRkRXZUckVuZChsb2FkaW5nU2NyZWVuRWwsICgpID0+IHsgbG9hZGluZ1NjcmVlbkVsLnJlbW92ZSgpOyB9KVxuICAgICAgICBcbiAgICAgICAgLy8gZXhlY3V0ZXMgYSBmdW5jdGlvbiB3aGVuIGRpc21pc3NpbmcgdGhlIGxvYWRpbmcgc2NyZWVuIChzdXBwb3NlZGx5IHdoZW4gZXZlcnl0aGluZyBoYXMgbG9hZGVkKVxuICAgICAgICBpZighZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImxvYWRpbmctc2NyZWVuW2NsYXNzKj0nb24nXVwiKSkgeyB0b0V4ZWNBZnRlckxvYWRpbmcoKTsgfVxuICAgIH1cblxuICAgIC8vIGNhbiBsb2FkIHRoaW5ncyBvdGhlciB0aGFuIGFzc2V0cyBpZiBuZWVkZWRcbiAgICB2YXIgY3VzdG9tVGhpbmdzVG9Mb2FkID0gY3VzdG9tVGhpbmdzVG9Mb2FkID8gY3VzdG9tVGhpbmdzVG9Mb2FkIDogZmFsc2U7XG4gICAgaWYoY3VzdG9tVGhpbmdzVG9Mb2FkKSB7IGN1c3RvbVRoaW5nc1RvTG9hZChsb2FkaW5nU2NyZWVuRWwsICgpID0+IHsgcmVtb3ZlTG9hZGluZ1NjcmVlbihjdXN0b21Ub0xvYWRPbklEKTsgfSk7IH1cblxuICAgIC8vIHdpbGwgbmVlZCBzb21lIHZpc3VhbHMgaWYgaXQgdGFrZXMgdGltZSwgYW5kIGl0J3MgY29vbGVyXG4gICAgaWYoIWxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctYW5pbWF0aW9uLWNvbnRhaW5lclwiKSkge1xuICAgICAgICBsb2FkaW5nU2NyZWVuRWwuaW5uZXJIVE1MID0gYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctYW5pbWF0aW9uLWNvbnRhaW5lciBoaWRlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImhlYWRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctaWRsZS1hbmltYXRpb25cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1wZXJjZW50XCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkaW5nLWJhclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJhclwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsYXNoLTFcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmbGFzaC0yXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlcmNlbnRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctc3RlcHMtaW5mb1wiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgLy8gZGVsYXkgYmVmb3JlIHNob3dpbmcgdGhlIGxvYWRpbmcgaW5mb3MgYmVjYXVzZSBpdCBpcyBub3QgbmVjZXNzYXJ5IHVudGlsIGl0IHJlYWxseSB0YWtlcyB0aW1lXG4gICAgc2V0VGltZW91dCgoKSA9PiB7IGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctYW5pbWF0aW9uLWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICB9LCAxMDAwKTtcblxuICAgIC8vIGludmlzaWJsZSBlbGVtZW50IHdoZXJlIHRoZSBhc3NldHMgd2hpbGUgYmUgY3JlYXRlZCB0byBsb2FkIHRoZW1lXG4gICAgdmFyIGFzc2V0c0xvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhc3NldHMtbG9hZGVyXCIpO1xuICAgICAgICBhc3NldHNMb2FkZXIuY2xhc3NMaXN0LmFkZChcImR1bW15XCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFzc2V0c0xvYWRlcik7XG5cblxuICAgIC8vIGRpdmlkaW5nIGFycmF5IGJ5IGNodW5rcyAtIChzdGFja292ZXJmbG93LmNvbS9hLzM3ODI2Njk4KVxuICAgIHZhciBwZXJDaHVuayA9IDQsIC8vIGl0ZW1zIHBlciBjaHVua1xuICAgICAgICBhc3NldHNCeUNodW5rcyA9IGFzc2V0c1RvTG9hZC5yZWR1Y2UoKGFsbCxvbmUsaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2ggPSBNYXRoLmZsb29yKGkvcGVyQ2h1bmspOyBcbiAgICAgICAgICAgIGFsbFtjaF0gPSBbXS5jb25jYXQoKGFsbFtjaF18fFtdKSxvbmUpOyBcbiAgICAgICAgICAgIHJldHVybiBhbGxcbiAgICAgICAgfSwgW10pO1xuICAgIFxuICAgIHZhciBkZWxheSA9IDAsIGFzc2V0c0NodW5rQ291bnQgPSAwLCBwcm9ncmVzc0xvYWRpbmdDdXJyZW50ID0gMDtcbiAgICAoZnVuY3Rpb24gbG9hZFRoZW1BbGwoKSB7IC8vIGxvYWQgZXZlcnkgYXNzZXRzIGZvdXIgYnkgZm91clxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgLy8gZGVsYXlpbmcgYW5kIHNlcGFyYXRpbmcgYnkgY2h1bmtzIGhlbHBzIGJyb3dzZXIgcGVyZm9ybWFuY2VzXG4gICAgICAgICAgICBkZWxheSA9IDUwO1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gJycsXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBhc3NldHNCeUNodW5rc1thc3NldHNDaHVua0NvdW50XSxcbiAgICAgICAgICAgICAgICBhc3NldExvYWRlZCA9IDA7XG5cbiAgICAgICAgICAgIGNodW5rLmZvckVhY2goYXNzZXQgPT4geyBpdGVtcyArPSAnPGltZyBzcmM9JysgYXNzZXQgKyc+JzsgfSk7XG4gICAgICAgICAgICBhc3NldHNMb2FkZXIuaW5uZXJIVE1MID0gaXRlbXM7XG5cbiAgICAgICAgICAgIC8vIGxvYWQgbmV4dCBjaHVuayB3aGVuIGV2ZXJ5IGFzc2V0IGhlcmUgaGFzIGJlZW4gbG9hZGVkXG4gICAgICAgICAgICBhc3NldHNMb2FkZXIucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKS5mb3JFYWNoKGl0ZW0gPT4geyBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7IC8vIGxvYWQgZXZlbnQgb24gZXZlcnkgb2YgdGhlbVxuICAgICAgICAgICAgICAgIC8vICsxIHdoZW4gbG9hZGVkXG4gICAgICAgICAgICAgICAgKythc3NldExvYWRlZDsgKytwcm9ncmVzc0xvYWRpbmdDdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudCA9ICgocHJvZ3Jlc3NMb2FkaW5nQ3VycmVudCAvIGFzc2V0c1RvTG9hZC5sZW5ndGgpICogMTAwKS50b0ZpeGVkKDApICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1wZXJjZW50IC5iYXJcIikuc3R5bGUud2lkdGggPSBwZXJjZW50O1xuICAgICAgICAgICAgICAgIGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctcGVyY2VudCAucGVyY2VudFwiKS5pbm5lckhUTUwgPSBwZXJjZW50O1xuXG4gICAgICAgICAgICAgICAgaWYoYXNzZXRMb2FkZWQgPj0gY2h1bmsubGVuZ3RoKSB7IC8vIHdoZW4gYWxsIGFzc2V0cyBhcmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmKGFzc2V0c0NodW5rQ291bnQgPCBhc3NldHNCeUNodW5rcy5sZW5ndGgpeyAvLyBpZiBub3QgdGhlIGxhc3QgY2h1bmtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRUaGVtQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIHdoZW4gaXMgdGhlIGxhc3QgY2h1bmsgOiBjbGVhbiAmIGZpbmlzaFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXRzTG9hZGVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlTG9hZGluZ1NjcmVlbihcIi1hc3NldHNcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTt9KTtcblxuICAgICAgICAgICAgKythc3NldHNDaHVua0NvdW50O1xuICAgICAgICB9LCAwICsgZGVsYXkpO1xuICAgIH0pKCk7XG59O1xuXG5sb2FkVGhpbmdzKGFzc2V0c1RvTG9hZCwgbG9hZE5vcm1hbCwgXCItbm9ybWFsXCIsIFdlbGNvbWVTcGF3bkFuaW1hdGlvbik7XG5cblxuLy8tIFZhcmlhYmxlcyAtXG5cblxuLy8tIFNjcmlwdHMgLVxuZnVuY3Rpb24gV2VsY29tZVNwYXduQW5pbWF0aW9uKCkgeyAvLyBTdGVwIDFcbiAgICBjb25zb2xlLmxvZygnc3Bhd24nKTtcbn1cblxuZnVuY3Rpb24gV2VsY29tZUludGVyYWN0aW9uQW5pbWF0aW9uKCkgeyAvLyBTdGVwIDJcbiAgICBjb25zb2xlLmxvZygnY2xpY2snKTtcbn1cblxuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi55LWxheWVyXCIpLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBXZWxjb21lSW50ZXJhY3Rpb25BbmltYXRpb24sIHsgb25jZSA6IHRydWUgfSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./app/main.js\n");

/***/ }),

/***/ "./app/style.scss":
/*!************************!*\
  !*** ./app/style.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc3R5bGUuc2Nzcz8zMmI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vYXBwL3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/style.scss\n");

/***/ })

/******/ });
//# sourceMappingURL=bundle.js.map