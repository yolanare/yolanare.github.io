/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/main.js":
/*!*********************!*\
  !*** ./app/main.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.scss */ \"./app/style.scss\");\n/* harmony import */ var _style_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_scss__WEBPACK_IMPORTED_MODULE_0__);\n//# Scripts #//\n//- Setup -\n\n\nfunction addEvTrEnd(elem, func, o) {\n  // executes a function when css transition of element ends\n  var isNotAlready = true,\n      o = o ? o : true; // once?\n\n  elem.addEventListener('transitionend', () => {\n    func();\n  }, {\n    once: o\n  }); // forgot what most of it does, but it works so it's fine (I think)\n\n  trEndAlready.forEach(e => {\n    isNotAlready &= e == elem ? false : true;\n  });\n\n  if (isNotAlready) {\n    trEndAlready.push(elem);\n    elem.childNodes.forEach(el => {\n      el.addEventListener('transitionend', ev => {\n        ev.stopPropagation();\n      });\n    }); // Makes sure that it doesn't propagate to its children\n  }\n}\n\nvar trEndAlready = []; // - LOADING SCREEN\n\nfunction loadingStepsInfoAdd(loadingScreenEl, info, force) {\n  // adds custom status info under the loading bar\n  var force = force ? force : false; // will force dismiss loading screen if true\n\n  function newInfo(info, d, s) {\n    var d = d ? d : 1250,\n        s = s ? s : \"\";\n    var el = document.createElement(\"div\");\n    el.innerHTML = info;\n    el.setAttribute(\"style\", s); // custom css style if needed\n\n    loadingScreenEl.querySelector(\".loading-steps-info\").appendChild(el);\n    setTimeout(() => {\n      el.classList.add('spawn');\n      setTimeout(() => {\n        el.classList.add('hide');\n        addEvTrEnd(el, () => {\n          el.remove();\n        });\n      }, d); // custom delay if needed\n    }, 10);\n  } // new info\n\n\n  if (loadingScreenEl.querySelector(\".loading-steps-info\") && !loadingScreenEl.querySelector(\".loading-animation-container.hide\")) {\n    // will run only if the loading screen infos are shown\n    newInfo(info);\n  } // forces dismiss the loading screen in case it takes too long to load/can't finish\n\n\n  if (force) {\n    setTimeout(() => {\n      if (document.querySelector(\"loading-screen[class*='on']\")) {\n        // only if not dismissed\n        if (loadingScreenEl.querySelector(\".loading-steps-info\")) {\n          // info\n          newInfo(\"Loading is taking too long, dismissing the loading screen...\", 3000, \"color: var(--y-r2)\");\n          console.warn(\"[Y.ART] Loading of assets is taking too long. Loading screen dismissed.\");\n        }\n\n        setTimeout(() => {\n          // force dismiss\n          loadingScreenEl.classList.add(\"force-dismiss\");\n        }, 2000);\n      }\n    }, 4000);\n  }\n}\n\nfunction loadNormal(loadingScreenEl, removeLoadingScreen) {\n  // events when normal necessary things are loaded\n  var FontsLoaded = false,\n      on = \"-normal\";\n  loadingScreenEl.classList.add(\"on\" + on);\n  window.addEventListener(\"load\", () => {\n    // to be sure the loading screen goes out at some point\n    if (!FontsLoaded) {\n      removeLoadingScreen(on);\n    }\n\n    loadingStepsInfoAdd(loadingScreenEl, \"Page Loaded\", true); // true = force dismiss loading screen\n  });\n  document.fonts.ready.then(() => {\n    // fonts are not too fast and not too long to load, seems good enough\n    removeLoadingScreen(on);\n    FontsLoaded = true;\n    loadingStepsInfoAdd(loadingScreenEl, \"Fonts Loaded\");\n  });\n}\n\n; // -- ASSETS TO LOAD\n\nconst srcP = '/src/patterns/',\n      assetsToLoad = [srcP + 'p1.png'];\n\nfunction loadThings(assetsToLoad, customThingsToLoad, customToLoadOnID, toExecAfterLoading) {\n  // creating basic loading screen\n  var loadingScreenEl = document.createElement(\"loading-screen\");\n  loadingScreenEl.classList.add(\"on-assets\");\n  document.body.appendChild(loadingScreenEl);\n\n  function removeLoadingScreen(on) {\n    // normal way to dismiss the loading screen\n    loadingScreenEl.classList.remove(\"on\" + on);\n    addEvTrEnd(loadingScreenEl, () => {\n      loadingScreenEl.remove();\n    }); // executes a function when dismissing the loading screen (supposedly when everything has loaded)\n\n    if (!document.querySelector(\"loading-screen[class*='on']\")) {\n      toExecAfterLoading();\n    }\n  } // can load things other than assets if needed\n\n\n  var customThingsToLoad = customThingsToLoad ? customThingsToLoad : false;\n\n  if (customThingsToLoad) {\n    customThingsToLoad(loadingScreenEl, () => {\n      removeLoadingScreen(customToLoadOnID);\n    });\n  } // will need some visuals if it takes time, and it's cooler\n\n\n  if (!loadingScreenEl.querySelector(\".loading-animation-container\")) {\n    loadingScreenEl.innerHTML = `\n            <div class=\"loading-animation-container hide\">\n                <div class=\"head\">\n                    <div class=\"idle-animation\"></div>\n                    <span>Loading...</span>\n                </div>\n                \n                <div class=\"loading-bar\">\n                    <div class=\"bar\"></div>\n                    <span class=\"percent\"></span>\n                </div>\n                <div class=\"loading-steps-info\"></div>\n            </div>\n        `;\n  } // delay before showing the loading infos because it is not necessary until it really takes time\n\n\n  setTimeout(() => {\n    loadingScreenEl.querySelector(\".loading-animation-container\").classList.remove('hide');\n  }, 1000); // invisible element where the assets while be created to load theme\n\n  var assetsLoader = document.createElement(\"assets-loader\");\n  assetsLoader.classList.add(\"dummy\");\n  document.body.appendChild(assetsLoader); // dividing array by chunks - (stackoverflow.com/a/37826698)\n\n  var perChunk = 4,\n      // items per chunk\n  assetsByChunks = assetsToLoad.reduce((all, one, i) => {\n    const ch = Math.floor(i / perChunk);\n    all[ch] = [].concat(all[ch] || [], one);\n    return all;\n  }, []);\n  var delay = 0,\n      assetsChunkCount = 0,\n      progressLoadingCurrent = 0;\n\n  (function loadThemAll() {\n    // load every assets four by four\n    setTimeout(() => {\n      // delaying and separating by chunks helps browser performances\n      delay = 50;\n      var items = '',\n          chunk = assetsByChunks[assetsChunkCount],\n          assetLoaded = 0;\n      chunk.forEach(asset => {\n        items += '<img src=' + asset + '>';\n      });\n      assetsLoader.innerHTML = items; // load next chunk when every asset here has been loaded\n\n      assetsLoader.querySelectorAll(\"img\").forEach(item => {\n        item.addEventListener('load', () => {\n          // load event on every of them\n          // +1 when loaded\n          ++assetLoaded;\n          ++progressLoadingCurrent;\n          const percent = (progressLoadingCurrent / assetsToLoad.length * 100).toFixed(0) + \"%\";\n          loadingScreenEl.querySelector(\".loading-bar .bar\").style.width = percent;\n          loadingScreenEl.querySelector(\".loading-bar .percent\").innerHTML = percent;\n\n          if (assetLoaded >= chunk.length) {\n            // when all assets are loaded\n            if (assetsChunkCount < assetsByChunks.length) {\n              // if not the last chunk\n              loadThemAll();\n            } else {\n              // when is the last chunk : clean & finish\n              assetsLoader.remove();\n              removeLoadingScreen(\"-assets\");\n            }\n          }\n        });\n      });\n      ++assetsChunkCount;\n    }, 0 + delay);\n  })();\n}\n\n;\nloadThings(assetsToLoad, loadNormal, \"-normal\", WelcomeSpawnAnimation); //- Variables -\n//- Scripts -\n\nfunction WelcomeSpawnAnimation() {\n  // Step 1\n  console.log('spawn');\n}\n\nfunction WelcomeInteractionAnimation() {\n  // Step 2\n  console.log('click');\n}\n\ndocument.querySelector(\".y-layer\").addEventListener(\"click\", WelcomeInteractionAnimation, {\n  once: true\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvbWFpbi5qcz9mMTYxIl0sIm5hbWVzIjpbImFkZEV2VHJFbmQiLCJlbGVtIiwiZnVuYyIsIm8iLCJpc05vdEFscmVhZHkiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInRyRW5kQWxyZWFkeSIsImZvckVhY2giLCJlIiwicHVzaCIsImNoaWxkTm9kZXMiLCJlbCIsImV2Iiwic3RvcFByb3BhZ2F0aW9uIiwibG9hZGluZ1N0ZXBzSW5mb0FkZCIsImxvYWRpbmdTY3JlZW5FbCIsImluZm8iLCJmb3JjZSIsIm5ld0luZm8iLCJkIiwicyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJhcHBlbmRDaGlsZCIsInNldFRpbWVvdXQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJjb25zb2xlIiwid2FybiIsImxvYWROb3JtYWwiLCJyZW1vdmVMb2FkaW5nU2NyZWVuIiwiRm9udHNMb2FkZWQiLCJvbiIsIndpbmRvdyIsImZvbnRzIiwicmVhZHkiLCJ0aGVuIiwic3JjUCIsImFzc2V0c1RvTG9hZCIsImxvYWRUaGluZ3MiLCJjdXN0b21UaGluZ3NUb0xvYWQiLCJjdXN0b21Ub0xvYWRPbklEIiwidG9FeGVjQWZ0ZXJMb2FkaW5nIiwiYm9keSIsImFzc2V0c0xvYWRlciIsInBlckNodW5rIiwiYXNzZXRzQnlDaHVua3MiLCJyZWR1Y2UiLCJhbGwiLCJvbmUiLCJpIiwiY2giLCJNYXRoIiwiZmxvb3IiLCJjb25jYXQiLCJkZWxheSIsImFzc2V0c0NodW5rQ291bnQiLCJwcm9ncmVzc0xvYWRpbmdDdXJyZW50IiwibG9hZFRoZW1BbGwiLCJpdGVtcyIsImNodW5rIiwiYXNzZXRMb2FkZWQiLCJhc3NldCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwicGVyY2VudCIsImxlbmd0aCIsInRvRml4ZWQiLCJzdHlsZSIsIndpZHRoIiwiV2VsY29tZVNw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QyxxQkFBdEMsQ0FBVixDLENBR0E7QUFHQTs7QUFDQSxTQUFTQSxxQkFBVCxHQUFpQztBQUFFO0FBQy9CM0MsU0FBTyxDQUFDNEMsR0FBUixDQUFZLE9BQVo7QUFDSDs7QUFFRCxTQUFTQywyQkFBVCxHQUF1QztBQUFFO0FBQ3JDN0MsU0FBTyxDQUFDNEMsR0FBUixDQUFZLE9BQVo7QUFDSDs7QUFFRHRELFFBQVEsQ0FBQ0ksYUFBVCxDQUF1QixVQUF2QixFQUFtQ3JCLGdCQUFuQyxDQUFvRCxPQUFwRCxFQUE2RHdFLDJCQUE3RCxFQUEwRjtBQUFFdkUsTUFBSSxFQUFHO0FBQVQsQ0FBMUYiLCJmaWxlIjoiLi9hcHAvbWFpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIyBTY3JpcHRzICMvL1xuXG4vLy0gU2V0dXAgLVxuaW1wb3J0ICcuL3N0eWxlLnNjc3MnO1xuXG5cbmZ1bmN0aW9uIGFkZEV2VHJFbmQoZWxlbSwgZnVuYywgbykgeyAvLyBleGVjdXRlcyBhIGZ1bmN0aW9uIHdoZW4gY3NzIHRyYW5zaXRpb24gb2YgZWxlbWVudCBlbmRzXG4gICAgdmFyIGlzTm90QWxyZWFkeSA9IHRydWUsXG4gICAgICAgIG8gPSBvID8gbyA6IHRydWU7IC8vIG9uY2U/XG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgKCkgPT4geyBmdW5jKCk7IH0sIHsgb25jZSA6IG8gfSk7XG5cbiAgICAvLyBmb3Jnb3Qgd2hhdCBtb3N0IG9mIGl0IGRvZXMsIGJ1dCBpdCB3b3JrcyBzbyBpdCdzIGZpbmUgKEkgdGhpbmspXG4gICAgdHJFbmRBbHJlYWR5LmZvckVhY2goZSA9PiB7IGlzTm90QWxyZWFkeSAmPSAoZSA9PSBlbGVtKSA/IGZhbHNlIDogdHJ1ZTsgfSk7XG4gICAgaWYoaXNOb3RBbHJlYWR5KSB7XG4gICAgICAgIHRyRW5kQWxyZWFkeS5wdXNoKGVsZW0pO1xuICAgICAgICBlbGVtLmNoaWxkTm9kZXMuZm9yRWFjaCgoZWwpID0+IHsgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIChldikgPT4geyBldi5zdG9wUHJvcGFnYXRpb24oKTsgfSl9KTsgLy8gTWFrZXMgc3VyZSB0aGF0IGl0IGRvZXNuJ3QgcHJvcGFnYXRlIHRvIGl0cyBjaGlsZHJlblxuICAgIH1cbn0gdmFyIHRyRW5kQWxyZWFkeSA9IFtdO1xuXG5cbi8vIC0gTE9BRElORyBTQ1JFRU5cbmZ1bmN0aW9uIGxvYWRpbmdTdGVwc0luZm9BZGQobG9hZGluZ1NjcmVlbkVsLCBpbmZvLCBmb3JjZSkgeyAvLyBhZGRzIGN1c3RvbSBzdGF0dXMgaW5mbyB1bmRlciB0aGUgbG9hZGluZyBiYXJcbiAgICB2YXIgZm9yY2UgPSBmb3JjZSA/IGZvcmNlIDogZmFsc2U7IC8vIHdpbGwgZm9yY2UgZGlzbWlzcyBsb2FkaW5nIHNjcmVlbiBpZiB0cnVlXG5cbiAgICBmdW5jdGlvbiBuZXdJbmZvKGluZm8sIGQsIHMpIHtcbiAgICAgICAgdmFyIGQgPSBkID8gZCA6IDEyNTAsXG4gICAgICAgICAgICBzID0gcyA/IHMgOiBcIlwiO1xuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gaW5mbztcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHMpOyAvLyBjdXN0b20gY3NzIHN0eWxlIGlmIG5lZWRlZFxuICAgICAgICAgICAgbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1zdGVwcy1pbmZvXCIpLmFwcGVuZENoaWxkKGVsKTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3NwYXduJyk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgYWRkRXZUckVuZChlbCwgKCkgPT4geyBlbC5yZW1vdmUoKTsgfSlcbiAgICAgICAgICAgIH0sIGQpOyAvLyBjdXN0b20gZGVsYXkgaWYgbmVlZGVkXG4gICAgICAgIH0sIDEwKTtcbiAgICB9XG5cbiAgICAvLyBuZXcgaW5mb1xuICAgIGlmKGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctc3RlcHMtaW5mb1wiKSAmJiAhbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1hbmltYXRpb24tY29udGFpbmVyLmhpZGVcIikpIHsgLy8gd2lsbCBydW4gb25seSBpZiB0aGUgbG9hZGluZyBzY3JlZW4gaW5mb3MgYXJlIHNob3duXG4gICAgICAgIG5ld0luZm8oaW5mbyk7XG4gICAgfVxuXG4gICAgLy8gZm9yY2VzIGRpc21pc3MgdGhlIGxvYWRpbmcgc2NyZWVuIGluIGNhc2UgaXQgdGFrZXMgdG9vIGxvbmcgdG8gbG9hZC9jYW4ndCBmaW5pc2hcbiAgICBpZihmb3JjZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJsb2FkaW5nLXNjcmVlbltjbGFzcyo9J29uJ11cIikpIHsgLy8gb25seSBpZiBub3QgZGlzbWlzc2VkXG4gICAgICAgICAgICAgICAgaWYobG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1zdGVwcy1pbmZvXCIpKSB7IC8vIGluZm9cbiAgICAgICAgICAgICAgICAgICAgbmV3SW5mbyhcIkxvYWRpbmcgaXMgdGFraW5nIHRvbyBsb25nLCBkaXNtaXNzaW5nIHRoZSBsb2FkaW5nIHNjcmVlbi4uLlwiLCAzMDAwLCBcImNvbG9yOiB2YXIoLS15LXIyKVwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiW1kuQVJUXSBMb2FkaW5nIG9mIGFzc2V0cyBpcyB0YWtpbmcgdG9vIGxvbmcuIExvYWRpbmcgc2NyZWVuIGRpc21pc3NlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyAvLyBmb3JjZSBkaXNtaXNzXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmdTY3JlZW5FbC5jbGFzc0xpc3QuYWRkKFwiZm9yY2UtZGlzbWlzc1wiKTtcbiAgICAgICAgICAgICAgICB9LCAyMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNDAwMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBsb2FkTm9ybWFsKGxvYWRpbmdTY3JlZW5FbCwgcmVtb3ZlTG9hZGluZ1NjcmVlbikgeyAvLyBldmVudHMgd2hlbiBub3JtYWwgbmVjZXNzYXJ5IHRoaW5ncyBhcmUgbG9hZGVkXG4gICAgdmFyIEZvbnRzTG9hZGVkID0gZmFsc2UsXG4gICAgICAgIG9uID0gXCItbm9ybWFsXCI7XG5cbiAgICBsb2FkaW5nU2NyZWVuRWwuY2xhc3NMaXN0LmFkZChcIm9uXCIgKyBvbik7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4geyAvLyB0byBiZSBzdXJlIHRoZSBsb2FkaW5nIHNjcmVlbiBnb2VzIG91dCBhdCBzb21lIHBvaW50XG4gICAgICAgIGlmKCFGb250c0xvYWRlZCkgeyByZW1vdmVMb2FkaW5nU2NyZWVuKG9uKTsgfVxuICAgICAgICBsb2FkaW5nU3RlcHNJbmZvQWRkKGxvYWRpbmdTY3JlZW5FbCwgXCJQYWdlIExvYWRlZFwiLCB0cnVlKTsgLy8gdHJ1ZSA9IGZvcmNlIGRpc21pc3MgbG9hZGluZyBzY3JlZW5cbiAgICB9KTtcbiAgICBkb2N1bWVudC5mb250cy5yZWFkeS50aGVuKCgpID0+IHsgLy8gZm9udHMgYXJlIG5vdCB0b28gZmFzdCBhbmQgbm90IHRvbyBsb25nIHRvIGxvYWQsIHNlZW1zIGdvb2QgZW5vdWdoXG4gICAgICAgIHJlbW92ZUxvYWRpbmdTY3JlZW4ob24pOyBGb250c0xvYWRlZCA9IHRydWU7XG4gICAgICAgIGxvYWRpbmdTdGVwc0luZm9BZGQobG9hZGluZ1NjcmVlbkVsLCBcIkZvbnRzIExvYWRlZFwiKTtcbiAgICB9KTtcbn07XG5cbi8vIC0tIEFTU0VUUyBUTyBMT0FEXG5jb25zdCBzcmNQID0gJy9zcmMvcGF0dGVybnMvJyxcbmFzc2V0c1RvTG9hZCA9IFtcbiAgICBzcmNQICsgJ3AxLnBuZycsXG5dO1xuXG5mdW5jdGlvbiBsb2FkVGhpbmdzKGFzc2V0c1RvTG9hZCwgY3VzdG9tVGhpbmdzVG9Mb2FkLCBjdXN0b21Ub0xvYWRPbklELCB0b0V4ZWNBZnRlckxvYWRpbmcpIHtcbiAgICAvLyBjcmVhdGluZyBiYXNpYyBsb2FkaW5nIHNjcmVlblxuICAgIHZhciBsb2FkaW5nU2NyZWVuRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibG9hZGluZy1zY3JlZW5cIik7XG4gICAgICAgIGxvYWRpbmdTY3JlZW5FbC5jbGFzc0xpc3QuYWRkKFwib24tYXNzZXRzXCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxvYWRpbmdTY3JlZW5FbCk7XG5cbiAgICBmdW5jdGlvbiByZW1vdmVMb2FkaW5nU2NyZWVuKG9uKSB7IC8vIG5vcm1hbCB3YXkgdG8gZGlzbWlzcyB0aGUgbG9hZGluZyBzY3JlZW5cbiAgICAgICAgbG9hZGluZ1NjcmVlbkVsLmNsYXNzTGlzdC5yZW1vdmUoXCJvblwiICsgb24pO1xuICAgICAgICBhZGRFdlRyRW5kKGxvYWRpbmdTY3JlZW5FbCwgKCkgPT4geyBsb2FkaW5nU2NyZWVuRWwucmVtb3ZlKCk7IH0pXG4gICAgICAgIFxuICAgICAgICAvLyBleGVjdXRlcyBhIGZ1bmN0aW9uIHdoZW4gZGlzbWlzc2luZyB0aGUgbG9hZGluZyBzY3JlZW4gKHN1cHBvc2VkbHkgd2hlbiBldmVyeXRoaW5nIGhhcyBsb2FkZWQpXG4gICAgICAgIGlmKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibG9hZGluZy1zY3JlZW5bY2xhc3MqPSdvbiddXCIpKSB7IHRvRXhlY0FmdGVyTG9hZGluZygpOyB9XG4gICAgfVxuXG4gICAgLy8gY2FuIGxvYWQgdGhpbmdzIG90aGVyIHRoYW4gYXNzZXRzIGlmIG5lZWRlZFxuICAgIHZhciBjdXN0b21UaGluZ3NUb0xvYWQgPSBjdXN0b21UaGluZ3NUb0xvYWQgPyBjdXN0b21UaGluZ3NUb0xvYWQgOiBmYWxzZTtcbiAgICBpZihjdXN0b21UaGluZ3NUb0xvYWQpIHsgY3VzdG9tVGhpbmdzVG9Mb2FkKGxvYWRpbmdTY3JlZW5FbCwgKCkgPT4geyByZW1vdmVMb2FkaW5nU2NyZWVuKGN1c3RvbVRvTG9hZE9uSUQpOyB9KTsgfVxuXG4gICAgLy8gd2lsbCBuZWVkIHNvbWUgdmlzdWFscyBpZiBpdCB0YWtlcyB0aW1lLCBhbmQgaXQncyBjb29sZXJcbiAgICBpZighbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1hbmltYXRpb24tY29udGFpbmVyXCIpKSB7XG4gICAgICAgIGxvYWRpbmdTY3JlZW5FbC5pbm5lckhUTUwgPSBgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1hbmltYXRpb24tY29udGFpbmVyIGhpZGVcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaWRsZS1hbmltYXRpb25cIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGluZy1iYXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJhclwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlcmNlbnRcIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRpbmctc3RlcHMtaW5mb1wiPjwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgLy8gZGVsYXkgYmVmb3JlIHNob3dpbmcgdGhlIGxvYWRpbmcgaW5mb3MgYmVjYXVzZSBpdCBpcyBub3QgbmVjZXNzYXJ5IHVudGlsIGl0IHJlYWxseSB0YWtlcyB0aW1lXG4gICAgc2V0VGltZW91dCgoKSA9PiB7IGxvYWRpbmdTY3JlZW5FbC5xdWVyeVNlbGVjdG9yKFwiLmxvYWRpbmctYW5pbWF0aW9uLWNvbnRhaW5lclwiKS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJylcbiAgICB9LCAxMDAwKTtcblxuICAgIC8vIGludmlzaWJsZSBlbGVtZW50IHdoZXJlIHRoZSBhc3NldHMgd2hpbGUgYmUgY3JlYXRlZCB0byBsb2FkIHRoZW1lXG4gICAgdmFyIGFzc2V0c0xvYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhc3NldHMtbG9hZGVyXCIpO1xuICAgICAgICBhc3NldHNMb2FkZXIuY2xhc3NMaXN0LmFkZChcImR1bW15XCIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGFzc2V0c0xvYWRlcik7XG5cblxuICAgIC8vIGRpdmlkaW5nIGFycmF5IGJ5IGNodW5rcyAtIChzdGFja292ZXJmbG93LmNvbS9hLzM3ODI2Njk4KVxuICAgIHZhciBwZXJDaHVuayA9IDQsIC8vIGl0ZW1zIHBlciBjaHVua1xuICAgICAgICBhc3NldHNCeUNodW5rcyA9IGFzc2V0c1RvTG9hZC5yZWR1Y2UoKGFsbCxvbmUsaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2ggPSBNYXRoLmZsb29yKGkvcGVyQ2h1bmspOyBcbiAgICAgICAgICAgIGFsbFtjaF0gPSBbXS5jb25jYXQoKGFsbFtjaF18fFtdKSxvbmUpOyBcbiAgICAgICAgICAgIHJldHVybiBhbGxcbiAgICAgICAgfSwgW10pO1xuICAgIFxuICAgIHZhciBkZWxheSA9IDAsIGFzc2V0c0NodW5rQ291bnQgPSAwLCBwcm9ncmVzc0xvYWRpbmdDdXJyZW50ID0gMDtcbiAgICAoZnVuY3Rpb24gbG9hZFRoZW1BbGwoKSB7IC8vIGxvYWQgZXZlcnkgYXNzZXRzIGZvdXIgYnkgZm91clxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgLy8gZGVsYXlpbmcgYW5kIHNlcGFyYXRpbmcgYnkgY2h1bmtzIGhlbHBzIGJyb3dzZXIgcGVyZm9ybWFuY2VzXG4gICAgICAgICAgICBkZWxheSA9IDUwO1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gJycsXG4gICAgICAgICAgICAgICAgY2h1bmsgPSBhc3NldHNCeUNodW5rc1thc3NldHNDaHVua0NvdW50XSxcbiAgICAgICAgICAgICAgICBhc3NldExvYWRlZCA9IDA7XG5cbiAgICAgICAgICAgIGNodW5rLmZvckVhY2goYXNzZXQgPT4geyBpdGVtcyArPSAnPGltZyBzcmM9JysgYXNzZXQgKyc+JzsgfSk7XG4gICAgICAgICAgICBhc3NldHNMb2FkZXIuaW5uZXJIVE1MID0gaXRlbXM7XG5cbiAgICAgICAgICAgIC8vIGxvYWQgbmV4dCBjaHVuayB3aGVuIGV2ZXJ5IGFzc2V0IGhlcmUgaGFzIGJlZW4gbG9hZGVkXG4gICAgICAgICAgICBhc3NldHNMb2FkZXIucXVlcnlTZWxlY3RvckFsbChcImltZ1wiKS5mb3JFYWNoKGl0ZW0gPT4geyBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7IC8vIGxvYWQgZXZlbnQgb24gZXZlcnkgb2YgdGhlbVxuICAgICAgICAgICAgICAgIC8vICsxIHdoZW4gbG9hZGVkXG4gICAgICAgICAgICAgICAgKythc3NldExvYWRlZDsgKytwcm9ncmVzc0xvYWRpbmdDdXJyZW50O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudCA9ICgocHJvZ3Jlc3NMb2FkaW5nQ3VycmVudCAvIGFzc2V0c1RvTG9hZC5sZW5ndGgpICogMTAwKS50b0ZpeGVkKDApICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1iYXIgLmJhclwiKS5zdHlsZS53aWR0aCA9IHBlcmNlbnQ7XG4gICAgICAgICAgICAgICAgbG9hZGluZ1NjcmVlbkVsLnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1iYXIgLnBlcmNlbnRcIikuaW5uZXJIVE1MID0gcGVyY2VudDtcblxuICAgICAgICAgICAgICAgIGlmKGFzc2V0TG9hZGVkID49IGNodW5rLmxlbmd0aCkgeyAvLyB3aGVuIGFsbCBhc3NldHMgYXJlIGxvYWRlZFxuICAgICAgICAgICAgICAgICAgICBpZihhc3NldHNDaHVua0NvdW50IDwgYXNzZXRzQnlDaHVua3MubGVuZ3RoKXsgLy8gaWYgbm90IHRoZSBsYXN0IGNodW5rXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkVGhlbUFsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyB3aGVuIGlzIHRoZSBsYXN0IGNodW5rIDogY2xlYW4gJiBmaW5pc2hcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0c0xvYWRlci5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUxvYWRpbmdTY3JlZW4oXCItYXNzZXRzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7fSk7XG5cbiAgICAgICAgICAgICsrYXNzZXRzQ2h1bmtDb3VudDtcbiAgICAgICAgfSwgMCArIGRlbGF5KTtcbiAgICB9KSgpO1xufTtcblxubG9hZFRoaW5ncyhhc3NldHNUb0xvYWQsIGxvYWROb3JtYWwsIFwiLW5vcm1hbFwiLCBXZWxjb21lU3Bhd25BbmltYXRpb24pO1xuXG5cbi8vLSBWYXJpYWJsZXMgLVxuXG5cbi8vLSBTY3JpcHRzIC1cbmZ1bmN0aW9uIFdlbGNvbWVTcGF3bkFuaW1hdGlvbigpIHsgLy8gU3RlcCAxXG4gICAgY29uc29sZS5sb2coJ3NwYXduJyk7XG59XG5cbmZ1bmN0aW9uIFdlbGNvbWVJbnRlcmFjdGlvbkFuaW1hdGlvbigpIHsgLy8gU3RlcCAyXG4gICAgY29uc29sZS5sb2coJ2NsaWNrJyk7XG59XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIueS1sYXllclwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgV2VsY29tZUludGVyYWN0aW9uQW5pbWF0aW9uLCB7IG9uY2UgOiB0cnVlIH0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./app/main.js\n");

/***/ }),

/***/ "./app/style.scss":
/*!************************!*\
  !*** ./app/style.scss ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hcHAvc3R5bGUuc2Nzcz8zMmI4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vYXBwL3N0eWxlLnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./app/style.scss\n");

/***/ })

/******/ });
//# sourceMappingURL=bundle.js.map